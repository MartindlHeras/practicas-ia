(use-package 'conecta4)

(declaim #+sbcl(sb-ext:muffle-conditions style-warning))

;; -------------------------------------------------------------------------------
;; Funciones de evaluaci√≥n
;; -------------------------------------------------------------------------------

(defun f-eval-bueno (estado)
  ; current player standpoint
  (let* ((tablero (estado-tablero estado))
         (ficha-actual (estado-turno estado))
         (ficha-oponente (siguiente-jugador ficha-actual)))
    (if (juego-terminado-p estado)
        (let ((ganador (ganador estado)))
          (cond ((not ganador) 0)
                ((eql ganador ficha-actual) +val-max+)
                (t +val-min+)))
      (let ((puntuacion-actual 0)
            (puntuacion-oponente 0))
        (loop for columna from 0 below (tablero-ancho tablero) do
              (let* ((altura (altura-columna tablero columna))
                     (fila (1- altura))
                     (abajo (contar-abajo tablero ficha-actual columna fila))
                     (der (contar-derecha tablero ficha-actual columna fila))
                     (izq (contar-izquierda tablero ficha-actual columna fila))
                     (abajo-der (contar-abajo-derecha tablero ficha-actual columna fila))
                     (arriba-izq (contar-arriba-izquierda tablero ficha-actual columna fila))
                     (abajo-izq (contar-abajo-izquierda tablero ficha-actual columna fila))
                     (arriba-der (contar-arriba-derecha tablero ficha-actual columna fila)))
                (setf puntuacion-actual
                  (+ puntuacion-actual
                     (cond ((= abajo 0) 0)
                           ((= abajo 1) 10)
                           ((= abajo 2) 100)
                           ((= abajo 3) 1000)
                           (t 0))
                     (cond ((= der 0) 0)
                           ((= der 1) 10)
                           ((= der 2) 100)
                           ((= der 3) 1000)
                           (t 0))
                     (cond ((= izq 0) 0)
                           ((= izq 1) 10)
                           ((= izq 2) 100)
                           ((= izq 3) 1000)
                           (t 0))
                     (cond ((= abajo-izq 0) 0)
                           ((= abajo-izq 1) 10)
                           ((= abajo-izq 2) 100)
                           ((= abajo-izq 3) 1000)
                           (t 0)))))
              (let* ((altura (altura-columna tablero columna))
                     (fila (1- altura))
                     (abajo (contar-abajo tablero ficha-oponente columna fila))
                     (der (contar-derecha tablero ficha-oponente columna fila))
                     (izq (contar-izquierda tablero ficha-oponente columna fila))
                     (abajo-der (contar-abajo-derecha tablero ficha-oponente columna fila))
                     (arriba-izq (contar-arriba-izquierda tablero ficha-oponente columna fila))
                     (abajo-izq (contar-abajo-izquierda tablero ficha-oponente columna fila))
                     (arriba-der (contar-arriba-derecha tablero ficha-oponente columna fila)))
                (setf puntuacion-oponente
                  (+ puntuacion-oponente
                     (cond ((= abajo 0) 0)
                           ((= abajo 1) 10)
                           ((= abajo 2) 100)
                           ((= abajo 3) 1000)
                           (t 0))
                     (cond ((= der 0) 0)
                           ((= der 1) 10)
                           ((= der 2) 100)
                           ((= der 3) 1000)
                           (t 0))
                     (cond ((= izq 0) 0)
                           ((= izq 1) 10)
                           ((= izq 2) 100)
                           ((= izq 3) 1000)
                           (t 0))
                     (cond ((= abajo-izq 0) 0)
                           ((= abajo-izq 1) 10)
                           ((= abajo-izq 2) 100)
                           ((= abajo-izq 3) 1000)
                           (t 0))))))
        (- puntuacion-actual puntuacion-oponente)))))




(defun f-eval-ab29a (estado)
  ; current player standpoint
  (let* ((tablero (estado-tablero estado))
         (ficha-actual (estado-turno estado))
         (ficha-oponente (siguiente-jugador ficha-actual)))
    (if (juego-terminado-p estado)
        (let ((ganador (ganador estado)))
          (cond ((not ganador) 0)
                ((eql ganador ficha-actual) +val-max+)
                (t +val-min+)))
      (let ((puntuacion-actual 0)
            (puntuacion-oponente 0))
        (loop for columna from 0 below (tablero-ancho tablero) do
              (let* ((altura (altura-columna tablero columna))
                     (fila (1- altura))
                     (abajo (contar-abajo tablero ficha-actual columna fila))
                     (arriba (contar-arriba tablero ficha-actual columna fila))
                     (der (contar-derecha tablero ficha-actual columna fila))
                     (izq (contar-izquierda tablero ficha-actual columna fila))
                     (abajo-der (contar-abajo-derecha tablero ficha-actual columna fila))
                     (arriba-izq (contar-arriba-izquierda tablero ficha-actual columna fila))
                     (abajo-izq (contar-abajo-izquierda tablero ficha-actual columna fila))
                     (arriba-der (contar-arriba-derecha tablero ficha-actual columna fila))
                     (horizontal (+ der izq))
                     (vertical (+ abajo arriba))
                     (diag-des (+ abajo-izq arriba-der))
                     (diag-asc (+ abajo-der arriba-izq)))
                (setf puntuacion-actual
                  (+ puntuacion-actual
                    (cond ((= abajo 0) 0)
                          ((= abajo 1) 20)
                          ((= abajo 2) 500)
                          ((= abajo 3) 2000)
                          (t 0))
                    (cond ((= arriba 0) 0)
                          ((= arriba 1) 20)
                          ((= arriba 2) 500)
                          ((= arriba 3) 2000)
                          (t 0))
                    (cond ((= der 0) 0)
                          ((= der 1) 20)
                          ((= der 2) 500)
                          ((= der 3) 2000)
                          (t 0))
                    (cond ((= izq 0) 0)
                          ((= izq 1) 20)
                          ((= izq 2) 500)
                          ((= izq 3) 2000)
                          (t 0))
                    (cond ((= abajo-izq 0) 0)
                          ((= abajo-izq 1) 20)
                          ((= abajo-izq 2) 500)
                          ((= abajo-izq 3) 3500)
                          (t 0))
                    (cond ((= abajo-der 0) 0)
                          ((= abajo-der 1) 20)
                          ((= abajo-der 2) 500)
                          ((= abajo-der 3) 3500)
                          (t 0))
                    (cond ((= arriba-der 0) 0)
                          ((= arriba-der 1) 20)
                          ((= arriba-der 2) 500)
                          ((= arriba-der 3) 3500)
                          (t 0))
                    (cond ((= arriba-izq 0) 0)
                          ((= arriba-izq 1) 20)
                          ((= arriba-izq 2) 500)
                          ((= arriba-izq 3) 3500)
                          (t 0)))))
              (let* ((altura (altura-columna tablero columna))
                     (fila (1- altura))
                     (abajo (contar-abajo tablero ficha-oponente columna fila))
                     (arriba (contar-arriba tablero ficha-actual columna fila))
                     (der (contar-derecha tablero ficha-oponente columna fila))
                     (izq (contar-izquierda tablero ficha-oponente columna fila))
                     (abajo-der (contar-abajo-derecha tablero ficha-oponente columna fila))
                     (arriba-izq (contar-arriba-izquierda tablero ficha-oponente columna fila))
                     (abajo-izq (contar-abajo-izquierda tablero ficha-oponente columna fila))
                     (arriba-der (contar-arriba-derecha tablero ficha-oponente columna fila))
                     (horizontal (+ der izq))
                     (vertical (+ abajo arriba))
                     (diag-des (+ abajo-izq arriba-der))
                     (diag-asc (+ abajo-der arriba-izq)))
                (setf puntuacion-oponente
                  (+ puntuacion-oponente
                    (cond ((= abajo 0) 0)
                          ((= abajo 1) 20)
                          ((= abajo 2) 500)
                          ((= abajo 3) 2000)
                          (t 0))
                    (cond ((= arriba 0) 0)
                          ((= arriba 1) 20)
                          ((= arriba 2) 500)
                          ((= arriba 3) 2000)
                          (t 0))
                    (cond ((= der 0) 0)
                          ((= der 1) 40)
                          ((= der 2) 700)
                          ((= der 3) 4000)
                          (t 0))
                    (cond ((= izq 0) 0)
                          ((= izq 1) 40)
                          ((= izq 2) 700)
                          ((= izq 3) 4000)
                          (t 0))
                    (cond ((= abajo-izq 0) 0)
                          ((= abajo-izq 1) 20)
                          ((= abajo-izq 2) 500)
                          ((= abajo-izq 3) 3500)
                          (t 0))
                    (cond ((= abajo-der 0) 0)
                          ((= abajo-der 1) 20)
                          ((= abajo-der 2) 500)
                          ((= abajo-der 3) 3500)
                          (t 0))
                    (cond ((= arriba-der 0) 0)
                          ((= arriba-der 1) 20)
                          ((= arriba-der 2) 500)
                          ((= arriba-der 3) 3500)
                          (t 0))
                    (cond ((= arriba-izq 0) 0)
                          ((= arriba-izq 1) 20)
                          ((= arriba-izq 2) 500)
                          ((= arriba-izq 3) 3500)
                          (t 0))))))
        (- puntuacion-actual puntuacion-oponente)))))



(defun f-eval-fc259 (estado)
  ; current player standpoint
  (let* ((tablero (estado-tablero estado))
         (ficha-actual (estado-turno estado))
         (ficha-oponente (siguiente-jugador ficha-actual)))
    (if (juego-terminado-p estado)
        (let ((ganador (ganador estado)))
          (cond ((not ganador) 0)
                ((eql ganador ficha-actual) +val-max+)
                (t +val-min+)))
      (let ((puntuacion-actual 0))
        (let* ((vertical (contar-columna tablero ficha-actual ficha-oponente 3 0))
               (esquina1 (contar-columna tablero ficha-actual ficha-oponente 0 0))
               (esquina2 (contar-columna tablero ficha-actual ficha-oponente 6 0)))
          (setf puntuacion-actual
            (cond ((< vertical 6)
                   (+ vertical (/ +val-max+ 2)))
                  (t (cond ((< esquina1 6)
                            (cond ((> esquina1 0) (+ esquina1 (/ +val-max+ 4)))
                                  (t 0)))
                           ((< esquina2 6)
                            (cond ((> esquina2 0) (+ esquina2 (/ +val-max+ 4)))
                                  (t 0)))
                           (t 0))))))
        puntuacion-actual))))


(defun f-eval-a2b3d (estado)
  ; current player standpoint
  ; current player standpoint
  (let* ((tablero (estado-tablero estado))
         (ficha-actual (estado-turno estado))
         (ficha-oponente (siguiente-jugador ficha-actual)))
    (if (juego-terminado-p estado)
        (let ((ganador (ganador estado)))
          (cond ((not ganador) 0)
                ((eql ganador ficha-actual) +val-max+)
                (t +val-min+)))
      (let ((puntuacion-actual 0)
            (puntuacion-oponente 0))
        (loop for columna from 0 below (tablero-ancho tablero) do
              (let* ((altura (altura-columna tablero columna))
                     (fila (1- altura))
                     (abajo (contar-abajo tablero ficha-actual columna fila))
                     (arriba (contar-arriba tablero ficha-actual columna fila))
                     (der (contar-derecha tablero ficha-actual columna fila))
                     (izq (contar-izquierda tablero ficha-actual columna fila))
                     (abajo-der (contar-abajo-derecha tablero ficha-actual columna fila))
                     (arriba-izq (contar-arriba-izquierda tablero ficha-actual columna fila))
                     (abajo-izq (contar-abajo-izquierda tablero ficha-actual columna fila))
                     (arriba-der (contar-arriba-derecha tablero ficha-actual columna fila)))
                (setf puntuacion-actual
                  (+ puntuacion-actual
                     (cond ((= abajo 0) 0)
                           ((= abajo 1) 20)
                           ((= abajo 2) 500)
                           ((= abajo 3) 3000)
                           (t 0))
                     (cond ((= arriba 0) 0)
                           ((= arriba 1) 20)
                           ((= arriba 2) 500)
                           ((= arriba 3) 3000)
                           (t 0))
                     (cond ((= der 0) 0)
                           ((= der 1) 20)
                           ((= der 2) 500)
                           ((= der 3) 3000)
                           (t 0))
                     (cond ((= izq 0) 0)
                           ((= izq 1) 20)
                           ((= izq 2) 500)
                           ((= izq 3) 3000)
                           (t 0))
                     (cond ((= abajo-izq 0) 0)
                           ((= abajo-izq 1) 20)
                           ((= abajo-izq 2) 500)
                           ((= abajo-izq 3) 3500)
                           (t 0))
                     (cond ((= abajo-der 0) 0)
                           ((= abajo-der 1) 20)
                           ((= abajo-der 2) 500)
                           ((= abajo-der 3) 3500)
                           (t 0))
                     (cond ((= arriba-der 0) 0)
                           ((= arriba-der 1) 20)
                           ((= arriba-der 2) 500)
                           ((= arriba-der 3) 3500)
                           (t 0))
                     (cond ((= arriba-izq 0) 0)
                           ((= arriba-izq 1) 20)
                           ((= arriba-izq 2) 500)
                           ((= arriba-izq 3) 3500)
                           (t 0)))))
              (let* ((altura (altura-columna tablero columna))
                     (fila (1- altura))
                     (abajo (contar-abajo tablero ficha-oponente columna fila))
                     (arriba (contar-arriba tablero ficha-oponente columna fila))
                     (der (contar-derecha tablero ficha-oponente columna fila))
                     (izq (contar-izquierda tablero ficha-oponente columna fila))
                     (abajo-der (contar-abajo-derecha tablero ficha-oponente columna fila))
                     (arriba-izq (contar-arriba-izquierda tablero ficha-oponente columna fila))
                     (abajo-izq (contar-abajo-izquierda tablero ficha-oponente columna fila))
                     (arriba-der (contar-arriba-derecha tablero ficha-oponente columna fila)))
                (setf puntuacion-oponente
                  (+ puntuacion-oponente
                     (cond ((= abajo 0) 0)
                           ((= abajo 1) 17)
                           ((= abajo 2) 200)
                           ((= abajo 3) 2500)
                           (t 0))
                     (cond ((= arriba 0) 0)
                           ((= arriba 1) 17)
                           ((= arriba 2) 200)
                           ((= arriba 3) 2500)
                           (t 0))
                     (cond ((= der 0) 0)
                           ((= der 1) 17)
                           ((= der 2) 200)
                           ((= der 3) 2500)
                           (t 0))
                     (cond ((= izq 0) 0)
                           ((= izq 1) 17)
                           ((= izq 2) 200)
                           ((= izq 3) 2500)
                           (t 0))
                     (cond ((= abajo-izq 0) 0)
                           ((= abajo-izq 1) 17)
                           ((= abajo-izq 2) 200)
                           ((= abajo-izq 3) 2500)
                           (t 0))
                     (cond ((= abajo-der 0) 0)
                           ((= abajo-der 1) 17)
                           ((= abajo-der 2) 200)
                           ((= abajo-der 3) 2500)
                           (t 0))
                     (cond ((= arriba-der 0) 0)
                           ((= arriba-der 1) 17)
                           ((= arriba-der 2) 200)
                           ((= arriba-der 3) 2500)
                           (t 0))
                     (cond ((= arriba-izq 0) 0)
                           ((= arriba-izq 1) 17)
                           ((= arriba-izq 2) 200)
                           ((= arriba-izq 3) 2500)
                           (t 0))))))
        (- puntuacion-actual puntuacion-oponente)))))



(defun prueba1 (estado)
  ; current player standpoint
  (let* ((tablero (estado-tablero estado))
         (ficha-actual (estado-turno estado))
         (ficha-oponente (siguiente-jugador ficha-actual)))
    (if (juego-terminado-p estado)
        (let ((ganador (ganador estado)))
          (cond ((not ganador) 0)
                ((eql ganador ficha-actual) +val-max+)
                (t +val-min+)))
      (let ((puntuacion-actual 0))
        (let* ((centro (contar-columna tablero ficha-actual ficha-oponente 3 0))
               (esquina1 (contar-columna tablero ficha-actual ficha-oponente 0 0))
               (esquina2 (contar-columna tablero ficha-actual ficha-oponente 6 0))
               (fila1 (contar-columna tablero ficha-actual ficha-oponente 1 0))
               (fila2 (contar-columna tablero ficha-actual ficha-oponente 2 0))
               (fila4 (contar-columna tablero ficha-actual ficha-oponente 4 0))
               (fila5 (contar-columna tablero ficha-actual ficha-oponente 5 0)))
          (setf puntuacion-actual
            (cond ((< centro 4)
                   (+ centro (/ +val-max+ 2)))
                  (t (cond ((< esquina2 4)
                            (+ esquina2 (/ +val-max+ 4)))
                           ((< esquina1 4)
                            (+ esquina1 (/ +val-max+ 4)))
                           ((< fila4 4)
                            (+ fila4 (/ +val-max+ 8)))
                           ((< fila5 4)
                            (+ fila5 (/ +val-max+ 8)))
                           ((< fila2 4)
                            (+ fila2 (/ +val-max+ 10)))
                           ((< fila1 4)
                            (+ fila1 (/ +val-max+ 10)))
                           (t 0))))))
        puntuacion-actual))))


(defun contar-columna (tablero ficha-actual ficha-oponente columna fila)
  (if (or (not (dentro-del-tablero-p tablero columna fila))
	        (and (not (eql (obtener-ficha tablero columna fila) ficha-actual))
               (not (eql (obtener-ficha tablero columna fila) ficha-oponente))))
      0
    (1+ (contar-columna tablero ficha-actual ficha-oponente columna (1+ fila)))))


;; -------------------------------------------------------------------------------
;; Jugadores
;; -------------------------------------------------------------------------------

(defvar *jugador-aleatorio* (make-jugador :nombre 'Jugador-aleatorio
                                          :f-jugador #'f-jugador-aleatorio
                                          :f-eval  #'f-eval-aleatoria))

(defvar *jugador-bueno* (make-jugador :nombre 'Jugador-bueno
                                      :f-jugador #'f-jugador-negamax
                                      :f-eval  #'f-eval-bueno))

(defvar *jugador-humano* (make-jugador :nombre 'Jugador-humano
                                       :f-jugador #'f-jugador-humano
                                       :f-eval  #'f-no-eval))

(defvar *jugador-ab29a* (make-jugador :nombre 'jugador-ab29a
                                      :f-jugador #'f-jugador-negamax
                                      :f-eval  #'f-eval-ab29a))

(defvar *jugador-fc259* (make-jugador :nombre 'jugador-fc259
                                       :f-jugador #'f-jugador-negamax
                                       :f-eval  #'f-eval-fc259))

(defvar *jugador-a2b3d* (make-jugador :nombre 'jugador-a2b3d
                                       :f-jugador #'f-jugador-negamax
                                       :f-eval  #'f-eval-a2b3d))

(defvar *jugador-prueba1* (make-jugador :nombre 'prueba1
                                      :f-jugador #'f-jugador-negamax
                                      :f-eval  #'prueba1))

;; -------------------------------------------------------------------------------
;; Algunas partidas de ejemplo:
;; -------------------------------------------------------------------------------

(setf *verbose* t)

;(print (partida *jugador-aleatorio* *jugador-aleatorio*))
;(print (partida *jugador-aleatorio* *jugador-bueno* 4))
;(print (partida *jugador-bueno* *jugador-aleatorio* 4))
;(print (partida *jugador-bueno* *jugador-bueno* 4))
;(print (partida *jugador-humano* *jugador-humano*))
;(print (partida *jugador-humano* *jugador-aleatorio* 4))
;(print (partida *jugador-humano* *jugador-bueno* 4))
;(print (partida *jugador-aleatorio* *jugador-humano*))
;(print (partida *jugador-aleatorio* *jugador-burro*))
(print (partida *jugador-bueno* *jugador-prueba1*))
