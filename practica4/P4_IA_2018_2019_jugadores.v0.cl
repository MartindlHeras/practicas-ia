(use-package 'conecta4)

(declaim #+sbcl(sb-ext:muffle-conditions style-warning))

;; -------------------------------------------------------------------------------
;; Funciones de evaluaci√≥n
;; -------------------------------------------------------------------------------

(defun f-eval-bueno (estado)
  ; current player standpoint
  (let* ((tablero (estado-tablero estado))
         (ficha-actual (estado-turno estado))
         (ficha-oponente (siguiente-jugador ficha-actual)))
    (if (juego-terminado-p estado)
        (let ((ganador (ganador estado)))
          (cond ((not ganador) 0)
                ((eql ganador ficha-actual) +val-max+)
                (t +val-min+)))
      (let ((puntuacion-actual 0)
            (puntuacion-oponente 0))
        (loop for columna from 0 below (tablero-ancho tablero) do
              (let* ((altura (altura-columna tablero columna))
                     (fila (1- altura))
                     (abajo (contar-abajo tablero ficha-actual columna fila))
                     (der (contar-derecha tablero ficha-actual columna fila))
                     (izq (contar-izquierda tablero ficha-actual columna fila))
                     (abajo-der (contar-abajo-derecha tablero ficha-actual columna fila))
                     (arriba-izq (contar-arriba-izquierda tablero ficha-actual columna fila))
                     (abajo-izq (contar-abajo-izquierda tablero ficha-actual columna fila))
                     (arriba-der (contar-arriba-derecha tablero ficha-actual columna fila)))
                (setf puntuacion-actual
                  (+ puntuacion-actual
                     (cond ((= abajo 0) 0)
                           ((= abajo 1) 10)
                           ((= abajo 2) 100)
                           ((= abajo 3) 1000))
                     (cond ((= der 0) 0)
                           ((= der 1) 10)
                           ((= der 2) 100)
                           ((= der 3) 1000))
                     (cond ((= izq 0) 0)
                           ((= izq 1) 10)
                           ((= izq 2) 100)
                           ((= izq 3) 1000))
                     (cond ((= abajo-izq 0) 0)
                           ((= abajo-izq 1) 10)
                           ((= abajo-izq 2) 100)
                           ((= abajo-izq 3) 1000)))))
              (let* ((altura (altura-columna tablero columna))
                     (fila (1- altura))
                     (abajo (contar-abajo tablero ficha-oponente columna fila))
                     (der (contar-derecha tablero ficha-oponente columna fila))
                     (izq (contar-izquierda tablero ficha-oponente columna fila))
                     (abajo-der (contar-abajo-derecha tablero ficha-oponente columna fila))
                     (arriba-izq (contar-arriba-izquierda tablero ficha-oponente columna fila))
                     (abajo-izq (contar-abajo-izquierda tablero ficha-oponente columna fila))
                     (arriba-der (contar-arriba-derecha tablero ficha-oponente columna fila)))
                (setf puntuacion-oponente
                  (+ puntuacion-oponente
                     (cond ((= abajo 0) 0)
                           ((= abajo 1) 10)
                           ((= abajo 2) 100)
                           ((= abajo 3) 1000))
                     (cond ((= der 0) 0)
                           ((= der 1) 10)
                           ((= der 2) 100)
                           ((= der 3) 1000))
                     (cond ((= izq 0) 0)
                           ((= izq 1) 10)
                           ((= izq 2) 100)
                           ((= izq 3) 1000))
                     (cond ((= abajo-izq 0) 0)
                           ((= abajo-izq 1) 10)
                           ((= abajo-izq 2) 100)
                           ((= abajo-izq 3) 1000))))))
        (- puntuacion-actual puntuacion-oponente)))))




(defun f-eval-ab29a (estado)
  ; current player standpoint
  (let* ((tablero (estado-tablero estado))
         (ficha-actual (estado-turno estado))
         (ficha-oponente (siguiente-jugador ficha-actual)))
    (if (juego-terminado-p estado)
        (let ((ganador (ganador estado)))
          (cond ((not ganador) 0)
                ((eql ganador ficha-actual) +val-max+)
                (t +val-min+)))
      (let ((puntuacion-actual 0)
            (puntuacion-oponente 0))
        (loop for columna from 0 below (tablero-ancho tablero) do
              (let* ((altura (altura-columna tablero columna))
                     (fila (1- altura))
                     (abajo (contar-abajo tablero ficha-actual columna fila))
                     (arriba (contar-arriba tablero ficha-actual columna fila))
                     (der (contar-derecha tablero ficha-actual columna fila))
                     (izq (contar-izquierda tablero ficha-actual columna fila))
                     (abajo-der (contar-abajo-derecha tablero ficha-actual columna fila))
                     (arriba-izq (contar-arriba-izquierda tablero ficha-actual columna fila))
                     (abajo-izq (contar-abajo-izquierda tablero ficha-actual columna fila))
                     (arriba-der (contar-arriba-derecha tablero ficha-actual columna fila))
                     (horizontal (+ der izq))
                     (vertical (+ abajo arriba))
                     (diag-des (+ abajo-izq arriba-der))
                     (diag-asc (+ abajo-der arriba-izq)))
                (setf puntuacion-actual
                  (+ puntuacion-actual
                    (cond ((= abajo 0) 0)
                          ((= abajo 1) 20)
                          ((= abajo 2) 500)
                          ((= abajo 3) 2000))
                    (cond ((= arriba 0) 0)
                          ((= arriba 1) 20)
                          ((= arriba 2) 500)
                          ((= arriba 3) 2000))
                    (cond ((= der 0) 0)
                          ((= der 1) 20)
                          ((= der 2) 500)
                          ((= der 3) 2000))
                    (cond ((= izq 0) 0)
                          ((= izq 1) 20)
                          ((= izq 2) 500)
                          ((= izq 3) 2000))
                    (cond ((= abajo-izq 0) 0)
                          ((= abajo-izq 1) 20)
                          ((= abajo-izq 2) 500)
                          ((= abajo-izq 3) 3500))
                    (cond ((= abajo-der 0) 0)
                          ((= abajo-der 1) 20)
                          ((= abajo-der 2) 500)
                          ((= abajo-der 3) 3500))
                    (cond ((= arriba-der 0) 0)
                          ((= arriba-der 1) 20)
                          ((= arriba-der 2) 500)
                          ((= arriba-der 3) 3500))
                    (cond ((= arriba-izq 0) 0)
                          ((= arriba-izq 1) 20)
                          ((= arriba-izq 2) 500)
                          ((= arriba-izq 3) 3500)))))
              (let* ((altura (altura-columna tablero columna))
                     (fila (1- altura))
                     (abajo (contar-abajo tablero ficha-oponente columna fila))
                     (arriba (contar-arriba tablero ficha-actual columna fila))
                     (der (contar-derecha tablero ficha-oponente columna fila))
                     (izq (contar-izquierda tablero ficha-oponente columna fila))
                     (abajo-der (contar-abajo-derecha tablero ficha-oponente columna fila))
                     (arriba-izq (contar-arriba-izquierda tablero ficha-oponente columna fila))
                     (abajo-izq (contar-abajo-izquierda tablero ficha-oponente columna fila))
                     (arriba-der (contar-arriba-derecha tablero ficha-oponente columna fila))
                     (horizontal (+ der izq))
                     (vertical (+ abajo arriba))
                     (diag-des (+ abajo-izq arriba-der))
                     (diag-asc (+ abajo-der arriba-izq)))
                (setf puntuacion-oponente
                  (+ puntuacion-oponente
                    (cond ((= abajo 0) 0)
                          ((= abajo 1) 20)
                          ((= abajo 2) 500)
                          ((= abajo 3) 2000))
                    (cond ((= arriba 0) 0)
                          ((= arriba 1) 20)
                          ((= arriba 2) 500)
                          ((= arriba 3) 2000))
                    (cond ((= der 0) 0)
                          ((= der 1) 40)
                          ((= der 2) 700)
                          ((= der 3) 4000))
                    (cond ((= izq 0) 0)
                          ((= izq 1) 40)
                          ((= izq 2) 700)
                          ((= izq 3) 4000))
                    (cond ((= abajo-izq 0) 0)
                          ((= abajo-izq 1) 20)
                          ((= abajo-izq 2) 500)
                          ((= abajo-izq 3) 3500))
                    (cond ((= abajo-der 0) 0)
                          ((= abajo-der 1) 20)
                          ((= abajo-der 2) 500)
                          ((= abajo-der 3) 3500))
                    (cond ((= arriba-der 0) 0)
                          ((= arriba-der 1) 20)
                          ((= arriba-der 2) 500)
                          ((= arriba-der 3) 3500))
                    (cond ((= arriba-izq 0) 0)
                          ((= arriba-izq 1) 20)
                          ((= arriba-izq 2) 500)
                          ((= arriba-izq 3) 3500))))))
        (- puntuacion-actual puntuacion-oponente)))))



(defun f-eval-fc259 (estado)
  ; current player standpoint
  (let* ((tablero (estado-tablero estado))
         (ficha-actual (estado-turno estado))
         (ficha-oponente (siguiente-jugador ficha-actual)))
    (if (juego-terminado-p estado)
        (let ((ganador (ganador estado)))
          (cond ((not ganador) 0)
                ((eql ganador ficha-actual) +val-max+)
                (t +val-min+)))
      (let ((puntuacion-actual 0)
            (puntuacion-oponente 0))
        (loop for columna from 0 below (tablero-ancho tablero) do
              (let* ((altura (altura-columna tablero columna))
                     (fila (1- altura))
                     (vertical (contar-abajo tablero ficha-actual columna fila))
                     (diagonal-asc (contar-arriba-derecha tablero ficha-actual columna fila)))
                (setf puntuacion-actual
                  (+ puntuacion-actual
                     (cond ((= vertical 0) 0)
                           ((= vertical 1) 20)
                           ((= vertical 2) 200)
                           ((= vertical 3) 1000))
                     (cond ((= diagonal-asc 0) 0)
                           ((= diagonal-asc 1) 20)
                           ((= diagonal-asc 2) 200)
                           ((= diagonal-asc 3) 1000)))))
              (let* ((altura (altura-columna tablero columna))
                     (fila (1- altura))
                     (vertical (contar-abajo tablero ficha-oponente columna fila))
                     (diagonal-asc (contar-arriba-derecha tablero ficha-oponente columna fila)))
                (setf puntuacion-oponente
                  (+ puntuacion-oponente
                     (cond ((= vertical 0) 0)
                           ((= vertical 1) 20)
                           ((= vertical 2) 200)
                           ((= vertical 3) 1500))
                     (cond ((= diagonal-asc 0) 0)
                           ((= diagonal-asc 1) 20)
                           ((= diagonal-asc 2) 200)
                           ((= diagonal-asc 3) 1000))))))
         (loop for fila from 0 below (tablero-alto tablero) do
               (let* ((columna 0)
                      (horizontal (contar-derecha tablero ficha-actual columna fila)))
                 (setf puntuacion-actual
                   (+ puntuacion-actual
                      (cond ((= horizontal 0) 0)
                            ((= horizontal 1) 25)
                            ((= horizontal 2) 200)
                            ((= horizontal 3) 1500)))))
               (let* ((columna 0)
                      (horizontal (contar-derecha tablero ficha-oponente columna fila)))
                 (setf puntuacion-oponente
                   (+ puntuacion-oponente
                      (cond ((= horizontal 0) 0)
                            ((= horizontal 1) 25)
                            ((= horizontal 2) 200)
                            ((= horizontal 3) 1500))))))
        (- puntuacion-actual puntuacion-oponente)))))


(defun f-eval-a2b3d (estado)
  ; current player standpoint
  ; current player standpoint
  (let* ((tablero (estado-tablero estado))
         (ficha-actual (estado-turno estado))
         (ficha-oponente (siguiente-jugador ficha-actual)))
    (if (juego-terminado-p estado)
        (let ((ganador (ganador estado)))
          (cond ((not ganador) 0)
                ((eql ganador ficha-actual) +val-max+)
                (t +val-min+)))
      (let ((puntuacion-actual 0)
            (puntuacion-oponente 0))
        (loop for columna from 0 below (tablero-ancho tablero) do
              (let* ((altura (altura-columna tablero columna))
                     (fila (1- altura))
                     (abajo (contar-abajo tablero ficha-actual columna fila))
                     (arriba (contar-arriba tablero ficha-actual columna fila))
                     (der (contar-derecha tablero ficha-actual columna fila))
                     (izq (contar-izquierda tablero ficha-actual columna fila))
                     (abajo-der (contar-abajo-derecha tablero ficha-actual columna fila))
                     (arriba-izq (contar-arriba-izquierda tablero ficha-actual columna fila))
                     (abajo-izq (contar-abajo-izquierda tablero ficha-actual columna fila))
                     (arriba-der (contar-arriba-derecha tablero ficha-actual columna fila)))
                (setf puntuacion-actual
                  (+ puntuacion-actual
                     (cond ((= abajo 0) 0)
                           ((= abajo 1) 20)
                           ((= abajo 2) 500)
                           ((= abajo 3) 3000))
                     (cond ((= arriba 0) 0)
                           ((= arriba 1) 20)
                           ((= arriba 2) 500)
                           ((= arriba 3) 3000))
                     (cond ((= der 0) 0)
                           ((= der 1) 20)
                           ((= der 2) 500)
                           ((= der 3) 3000))
                     (cond ((= izq 0) 0)
                           ((= izq 1) 20)
                           ((= izq 2) 500)
                           ((= izq 3) 3000))
                     (cond ((= abajo-izq 0) 0)
                           ((= abajo-izq 1) 20)
                           ((= abajo-izq 2) 500)
                           ((= abajo-izq 3) 3500))
                     (cond ((= abajo-der 0) 0)
                           ((= abajo-der 1) 20)
                           ((= abajo-der 2) 500)
                           ((= abajo-der 3) 3500))
                     (cond ((= arriba-der 0) 0)
                           ((= arriba-der 1) 20)
                           ((= arriba-der 2) 500)
                           ((= arriba-der 3) 3500))
                     (cond ((= arriba-izq 0) 0)
                           ((= arriba-izq 1) 20)
                           ((= arriba-izq 2) 500)
                           ((= arriba-izq 3) 3500)))))
              (let* ((altura (altura-columna tablero columna))
                     (fila (1- altura))
                     (abajo (contar-abajo tablero ficha-oponente columna fila))
                     (arriba (contar-arriba tablero ficha-oponente columna fila))
                     (der (contar-derecha tablero ficha-oponente columna fila))
                     (izq (contar-izquierda tablero ficha-oponente columna fila))
                     (abajo-der (contar-abajo-derecha tablero ficha-oponente columna fila))
                     (arriba-izq (contar-arriba-izquierda tablero ficha-oponente columna fila))
                     (abajo-izq (contar-abajo-izquierda tablero ficha-oponente columna fila))
                     (arriba-der (contar-arriba-derecha tablero ficha-oponente columna fila)))
                (setf puntuacion-oponente
                  (+ puntuacion-oponente
                     (cond ((= abajo 0) 0)
                           ((= abajo 1) 17)
                           ((= abajo 2) 200)
                           ((= abajo 3) 2500))
                     (cond ((= arriba 0) 0)
                           ((= arriba 1) 17)
                           ((= arriba 2) 200)
                           ((= arriba 3) 2500))
                     (cond ((= der 0) 0)
                           ((= der 1) 17)
                           ((= der 2) 200)
                           ((= der 3) 2500))
                     (cond ((= izq 0) 0)
                           ((= izq 1) 17)
                           ((= izq 2) 200)
                           ((= izq 3) 2500))
                     (cond ((= abajo-izq 0) 0)
                           ((= abajo-izq 1) 17)
                           ((= abajo-izq 2) 200)
                           ((= abajo-izq 3) 2500))
                     (cond ((= abajo-der 0) 0)
                           ((= abajo-der 1) 17)
                           ((= abajo-der 2) 200)
                           ((= abajo-der 3) 2500))
                     (cond ((= arriba-der 0) 0)
                           ((= arriba-der 1) 17)
                           ((= arriba-der 2) 200)
                           ((= arriba-der 3) 2500))
                     (cond ((= arriba-izq 0) 0)
                           ((= arriba-izq 1) 17)
                           ((= arriba-izq 2) 200)
                           ((= arriba-izq 3) 2500))))))
        (- puntuacion-actual puntuacion-oponente)))))



;; -------------------------------------------------------------------------------
;; Jugadores
;; -------------------------------------------------------------------------------

(defvar *jugador-aleatorio* (make-jugador :nombre 'Jugador-aleatorio
                                          :f-jugador #'f-jugador-aleatorio
                                          :f-eval  #'f-eval-aleatoria))

(defvar *jugador-bueno* (make-jugador :nombre 'Jugador-bueno
                                      :f-jugador #'f-jugador-negamax
                                      :f-eval  #'f-eval-bueno))

(defvar *jugador-humano* (make-jugador :nombre 'Jugador-humano
                                       :f-jugador #'f-jugador-humano
                                       :f-eval  #'f-no-eval))

(defvar *jugador-ab29a* (make-jugador :nombre 'Jugador-humano
                                      :f-jugador #'f-jugador-negamax
                                      :f-eval  #'f-eval-ab29a))

(defvar *jugador-fc259* (make-jugador :nombre 'Jugador-humano
                                       :f-jugador #'f-jugador-negamax
                                       :f-eval  #'f-eval-fc259))

(defvar *jugador-a2b3d* (make-jugador :nombre 'Jugador-humano
                                       :f-jugador #'f-jugador-negamax
                                       :f-eval  #'f-eval-a2b3d))

;; -------------------------------------------------------------------------------
;; Algunas partidas de ejemplo:
;; -------------------------------------------------------------------------------

(setf *verbose* nil)

;(print (partida *jugador-aleatorio* *jugador-aleatorio*))
;(print (partida *jugador-aleatorio* *jugador-bueno* 4))
;(print (partida *jugador-bueno* *jugador-aleatorio* 4))
;(print (partida *jugador-bueno* *jugador-bueno* 4))
;(print (partida *jugador-humano* *jugador-humano*))
;(print (partida *jugador-humano* *jugador-aleatorio* 4))
;(print (partida *jugador-humano* *jugador-bueno* 4))
;(print (partida *jugador-aleatorio* *jugador-humano*))
;(print (partida *jugador-aleatorio* *jugador-burro*))
(print (partida *jugador-fc259* *jugador-bueno*))

;;
